@inject NavigationManager Navigation
@inject HttpClient _client
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS


<a @onclick="() => GoToCart()" class="btn border">
    <i class="fas fa-shopping-cart text-primary"></i>
    <span class="badge" id="cart-count-badge">@BasketItems.Count()</span>
</a>

@code {
    public string LocalStorageBasketKey { get; set; } = "basketId";

    public List<BasketItem> BasketItems { get; set; } = new List<BasketItem>();
    public Basket basket { get; set; } = default!;

    public void GoToCart()
    {
        Navigation.NavigateTo("cart");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        int? basketId = null;
        if (await localStorage.ContainKeyAsync(LocalStorageBasketKey) == false)
        {
            BasketDTO tempBasket = new BasketDTO();
            basketId = await CreateBasket(tempBasket);
            if (basketId == null)
            {
                return;
            }
            await localStorage.SetItemAsync<int>(LocalStorageBasketKey, (int)basketId);

        }
        if (basketId == null)
        {
            basketId = (int?)(await localStorage.GetItemAsync<int>(LocalStorageBasketKey));
        }
        if (basketId == null)
        {
            return;
        }
        basket = await GetBasket((int)basketId);

        BasketItems = await GetBasketItems(basket.Id);
    }

    public async Task<Basket> GetBasket(int id, string queryString = "")
    {
        var response = await _client.GetAsync("basket/" + id + "?" + queryString);
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }
        var item = JsonSerializer.Deserialize<Basket>(content, new JsonSerializerOptions
            {
                ReferenceHandler = ReferenceHandler.Preserve,
                PropertyNameCaseInsensitive = true
            });
        return item != null ? item : new Basket();
    }

    public async Task<List<BasketItem>> GetBasketItems(int basketId)
    {
        var response = await _client.GetAsync("basketitems?basketId=" + basketId);
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }
        var item = JsonSerializer.Deserialize<List<BasketItem>>(content, new JsonSerializerOptions
            {
                ReferenceHandler = ReferenceHandler.Preserve,
                PropertyNameCaseInsensitive = true
            });
        return item != null ? item : new List<BasketItem>();
    }

    public async Task<int?> CreateBasket(BasketDTO basket)
    {
        var response = await _client.PostAsJsonAsync("basket", basket);
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }
        return JsonSerializer.Deserialize<int>(content);
    }
}
