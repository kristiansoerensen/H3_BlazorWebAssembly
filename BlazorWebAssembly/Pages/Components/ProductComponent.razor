@inject NavigationManager Navigation
@inject HttpClient _client
@using System.Text.Json;
@using System.Text.Json.Serialization;
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="card product-item border-0 mb-4">
    <a asp-page="/Shop/Details" asp-route-id="@Product.Id">
        <div class="card-header product-img position-relative overflow-hidden bg-transparent border p-0">
            @if (Product.Images?.Count() > 0)
            {
                <img class="img-fluid w-100" src="/img/placeholder.png" alt="">
            }
            else
            {
                <img class="img-fluid w-100" src="/img/placeholder.png" alt="">
            }
        </div>
        <div class="card-body border-left border-right text-center p-0 pt-4 pb-3">
            <h6 class="text-truncate mb-3">@Product.Name</h6>
            <div class="d-flex justify-content-center">
                <h6>$@Product.Price</h6><h6 class="text-muted ml-2"></h6>
            </div>
        </div>
        <div class="card-footer d-flex justify-content-between bg-light border">
            <button type="button" @onclick="() => NavigatoToProductDetail()" class="btn btn-sm text-dark p-0"><i class="fas fa-eye text-primary mr-1"></i>View Detail</button>
            <button type="button" @onclick="() => AddToCart()" class="btn btn-sm text-dark p-0"><i class="fas fa-shopping-cart text-primary mr-1"></i>Add To Cart</button>
            @*<a asp-page="./Cart" class="btn btn-sm text-dark p-0"><i class="fas fa-shopping-cart text-primary mr-1"></i>Add To Cart</a>*@
        </div>
    </a>
</div>

@code {
    [Parameter]
    public Product Product { get; set; } = new Product();
    public string LocalStorageBasketKey { get; set; } = "basketId";

    async Task AddToCart()
    {
        int? basketId = null;
        if (await localStorage.ContainKeyAsync(LocalStorageBasketKey) == false)
        {
            BasketDTO tempBasket = new BasketDTO();
            basketId = await CreateBasket(tempBasket);
            if (basketId == null)
            {
                return;
            }
            await localStorage.SetItemAsync<int>(LocalStorageBasketKey, (int)basketId);

        }
        if (basketId == null)
        {
            basketId = (int?)(await localStorage.GetItemAsync<int>(LocalStorageBasketKey));
        }
        if (basketId == null)
        {
            return;
        }
        var response = await _client.PostAsync($"basket/addtocart/{basketId}?productId={Product.Id}&qty=1", new StringContent(""));
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }
        Navigation.NavigateTo("cart");
    }

    public async Task<int?> CreateBasket(BasketDTO basket)
    {
        var response = await _client.PostAsJsonAsync("basket", basket);
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }
        return JsonSerializer.Deserialize<int>(content);
    }

    void NavigatoToProductDetail()
    {
        Navigation.NavigateTo("/product/" + Product.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
}
